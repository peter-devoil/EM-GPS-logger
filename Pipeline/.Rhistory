sc <- read_excel("../soils/CharacterisationData.xlsx", sheet = 1) %>%
filter(grepl("Gatton", SiteName),
ExpNo == 2022001) %>%
mutate(midPoint_cm = MidPoint_cm)
library(ggplot2)
ggplot(df, aes(x = -1 * midPoint_cm)) +
geom_point(aes(y=Vol_mm.mm), colour="grey", alpha=0.3) +
geom_line(data=siteMean, aes(y=VMM)) +
geom_line(data=sc, aes(y=LL15_mm.mm, colour="green")) +
geom_line(data=sc, aes(y=DUL_mm.mm, colour="brown")) +
coord_flip() +
labs(y="Vol mm/mm", x= "depth cm", title="Site mean SW 16/6/22") +
guides(colour="none") +
theme_minimal()
siteMean
rm(list=ls())
storageDir <- "~/work/People/Dongxue Z/2024 Sentek Probes/"
storageFile <- "Sentek_Winter_24.RData"
apiKey <- "c54f670d-243b-457c-9dba-f2c38bf32ca2"
setwd(storageDir)
cat(format.POSIXct(Sys.time()), " - downloading\n")
library(httr2)
library(xml2)
library(data.table)
# details of all databases
getLoggerXML <- function() {
url <- paste0("https://www.irrimaxlive.com/api/?cmd=getloggers&key=", apiKey)
resp <- req_perform(request(url))
stopifnot(resp_status(resp) == 200)
return(read_xml(resp_body_string(resp)))
}
#  installation and zone information of all databases
getLoggersInfo <- function() {
url <- paste0("https://www.irrimaxlive.com/api/?cmd=getloggersinfo&key=", apiKey)
resp <- req_perform(request(url))
stopifnot(resp_status(resp) == 200)
return(read.csv(text=resp_body_string(resp)))
}
# Get the readings from one logger
getReadings <- function(loggerID, after = {}) {
url <- paste0("https://www.irrimaxlive.com/api/?cmd=getreadings&key=", apiKey, "&name=", loggerID)
if (!is.null(after)) {
url <- paste0(url, "&from=", format.POSIXct(after, format="%Y%m%d%H%M%S"))
}
resp <- req_perform(request(url))
stopifnot(resp_status(resp) == 200)
return(read.csv(text=resp_body_string(resp)))
}
file.exists(storageFile)
# 1st time through - get metatdata
xmlDoc <- getLoggerXML()
loggerIDs <- sapply(xml_children(xmlDoc), xml_attr, "logger_id")
loggerIDs
allInfo <- getLoggersInfo()
allReadings <- list()
for (logger in loggerIDs) {
reading <- cbind(loggerID = logger, getReadings(logger))
reading$Date.Time <- as.POSIXct(reading$Date.Time, format="%Y/%m/%d %H:%M:%S")
allReadings[[logger]] <- reading
}
allReadings <- rbindlist(allReadings)
save(loggerIDs, allInfo, allReadings, file=storageFile)
lastUpdate <- max(allReadings$Date.Time)
newReadings <- list()
for (logger in loggerIDs) {
newReading <- getReadings(logger, after=lastUpdate)
if (nrow(newReading) > 0) {
reading <- cbind(loggerID = logger, newReading )
reading$Date.Time <- as.POSIXct(reading$Date.Time, format="%Y/%m/%d %H:%M:%S")
newReadings[[logger]] <- reading
}
}
if (any(unlist(lapply(newReadings, nrow)))) {
cat(format.POSIXct(Sys.time()), " - updating from ", format.POSIXct(lastUpdate), "\n")
allReadings <- rbind(allReadings, rbindlist(newReadings))
save(loggerIDs, allReadings, file=storageFile)
} else {
cat(format.POSIXct(Sys.time()), " - no updates\n")
}
??tools::file_ext
??vroom
install.packages("vroom")
install.packages("vroom")
install.packages("vroom")
install.packages("vroom")
library(shiny)
library(dplyr)
library(vroom)
source("~/work/Projects/GRDC Roots 2023/Pipeline/App1.R", echo=TRUE)
runApp('~/work/Projects/GRDC Roots 2023/Pipeline/App1.R')
rm(list=ls())
install.packages("vroom")
library(shiny); runApp('~/work/Projects/GRDC Roots 2023/Pipeline/App1.R')
runApp('~/work/Projects/GRDC Roots 2023/Pipeline/App1.R')
runApp('~/work/Projects/GRDC Roots 2023/Pipeline/App1.R')
?tableOutput
?head
?head.matrix
??head.matrix
runApp('~/work/Projects/GRDC Roots 2023/Pipeline/App1.R')
runApp('~/work/Projects/GRDC Roots 2023/Pipeline/App1.R')
??vroom
setwd("~/Downloads/")
df <- vroom::vroom("Dualem21S_07062024_10cmAboveGround.csv"
)
df.old <- read.delim("~/src/ApsimX/Tests/Simulation/ZMQ-Sync/z2.txt", sep=" ")
df.old <- read.delim("~/src/ApsimX/Tests/Simulation/ZMQ-Sync/z2.txt", sep=" ")
df.old <- read.delim("~/src/ApsimX/Tests/Simulation/ZMQ-Sync/z2.txt", sep=" +")
?read.delim
df.old <- read.table("~/src/ApsimX/Tests/Simulation/ZMQ-Sync/z2.txt")
df.old <- read.table("~/src/ApsimX/Tests/Simulation/ZMQ-Sync/z2.txt", header=T)
df.new <- read.table("~/tmp/ApsimX/Tests/Simulation/ZMQ-Sync/z.txt", header=T)
df <- cbind(old=df.old[-1,"time"], new=df.new[-1,"time"])
library(dplyr)
df %>% summarise(old=mean(old), new=mean(new))
df <- data.frame(old=df.old[-1,"time"], new=df.new[-1,"time"])
df %>% summarise(old=mean(old), new=mean(new))
100 *0.09391147 / 0.09468785
View(df.new)
View(df.old)
hist(df$old)
hist(df$new)
ggplot(df) + geom_hist(aes(x=new))
library(ggplot2); ggplot(df) + geom_hist(aes(x=new))
library(ggplot2); ggplot(df) + geom_histogram(aes(x=new))
df <- bind_rows(data.frame(what="old", df.old[-1,"time"])
data.frame(what="new", df.new[-1,"time"]))
df <- bind_rows(data.frame(what="old", df.old[-1,"time"]),
data.frame(what="new", df.new[-1,"time"]))
df <- bind_rows(data.frame(what="old", time=df.old[-1,"time"]),
data.frame(what="new", time=df.new[-1,"time"]))
ggplot(df) + geom_histogram(aes(x=time,group=what))
ggplot(df) + geom_histogram(aes(x=time,group=what,fill=what))
ggplot(df) + geom_histogram(aes(x=time,group=what,fill=what), binwidth=0.05)
ggplot(df) + geom_histogram(aes(x=time,group=what,fill=what), binwidth=0.005)
ggplot(df) + geom_histogram(aes(x=time,group=what,fill=what), binwidth=0.005,position = "dodge",)
ggplot(df) + geom_histogram(aes(x=time,group=what,fill=what), binwidth=0.005,position = "dodge",) + theme_minimal()
rm(list=ls())
# Comparison of met file generation methods:
# marksim http://ccafs-climate.org/pattern_scaling/
# LARS-WGEN https://sites.google.com/view/lars-wg/
# "Observed" data from https://longpaddock.qld.gov.au/silo/
# cut/comment as desired. Output data in "met" subdirectory.
setwd("~/work/People/Zhihao T/2024 Met data/")
library(data.table)
library(dplyr)
library(ggplot2)
library(RcppRoll)
rm(list = ls())
setwd("~/work/People/Zhihao T/2024 Met data/")
library(data.table)
library(dplyr)
library(ggplot2)
library(RcppRoll)
sites<- data.frame(
name = c("Dalby"),
latitude = c(-27.181790664480804),
longitude = c(151.25729299830317)
)
read.apsim <- function(apsim.name) {
header<<-readLines(apsim.name, n=30)
if (length(header) == 0 ) {return(NULL)}
i<-which(grepl("year", header))
apsim <- fread(apsim.name,skip=i+1,na.strings=c("NA","?"))
names(apsim) <- unlist(strsplit(trimws(header[i]), " +"))
return(cbind(file=apsim.name, apsim))
}
pdf("1. wgen vs silo.pdf", width=6, height=5)
#pdf("1. wgen vs silo.pdf", width=6, height=5)
df.wgen <- do.call(rbind, lapply(list.files("./met/dalb.wgen/",full.names = T), read.apsim))
df.silo <- read.apsim("Dalby.met")
# One big DF with all data
df<- rbind(cbind(src="wgen", df.wgen),
cbind(src="silo", df.silo), fill=T)
df$date<- as.Date(paste(df$year, df$day), format="%Y %j")
df$month<- as.numeric(format.Date(df$date, "%m"))
df$season<- ifelse(df$month > 9, "OND",
ifelse(df$month > 6, "JAS",
ifelse(df$month > 3, "AMJ", "JFM")))
# Daily (non-zero) rainfall
z<- cbind(
p = seq(0,1,by=0.01),
df %>% filter(rain > 1 & src == "wgen") %>% reframe(wgen=quantile(rain,probs=seq(0,1,by=0.01))),
df %>% filter(rain > 1 & src == "silo") %>% reframe(silo=quantile(rain,probs=seq(0,1,by=0.01))))
ggplot(z) + geom_point(aes(x=wgen,y=silo)) + geom_abline(slope=1) +
labs(title="QQ - daily rainfall totals") +
theme_minimal()
# Monthly
df.m<-df %>%
group_by(src, file, month, year) %>%
summarise(rain = sum(rain)) %>%
tidyr::spread(src, rain) %>%
ungroup() %>%
select(-c(file,year))
z<- cbind(
df.m %>% group_by(month) %>% reframe(wgen=quantile(na.omit(wgen),probs=seq(0,1,by=0.01))),
df.m %>% group_by(month) %>% reframe(silo=quantile(na.omit(silo),probs=seq(0,1,by=0.01))))
z<- z[,!duplicated(colnames(z))]
z$month <- factor(z$month, levels=1:12)
ggplot(z) + geom_point(aes(x=wgen,y=silo)) + geom_abline(slope=1) +
labs(title="QQ - monthly rainfall totals") +
theme_minimal() + facet_wrap(~month)
# Look at wet/dry day frequency
df.m<-df %>%
group_by(src, file, month, year) %>%
summarise(nrain = sum(rain > 1) / n()) %>%
tidyr::spread(src, nrain) %>%
ungroup() %>%
select(-c(file,year))
z<- cbind(
df.m %>% group_by(month) %>% reframe(wgen=quantile(na.omit(wgen),probs=seq(0,1,by=0.01))),
df.m %>% group_by(month) %>% reframe(silo=quantile(na.omit(silo),probs=seq(0,1,by=0.01))))
z<- z[,!duplicated(colnames(z))]
z$month <- factor(z$month, levels=1:12)
ggplot(z) + geom_point(aes(x=wgen,y=silo)) + geom_abline(slope=1) +
labs(title="QQ - monthly rain days") +
theme_minimal() + facet_wrap(~month)
#Seasonal rainfall
df.s<-df %>%
group_by(src, file, season, year) %>%
summarise(rain = sum(rain)) %>%
tidyr::spread(src, rain) %>%
ungroup() %>%
select(-c(file,year))
z<- cbind(
df.s %>% group_by(season) %>% reframe(wgen=quantile(na.omit(wgen),probs=seq(0,1,by=0.01))),
df.s %>% group_by(season) %>% reframe(silo=quantile(na.omit(silo),probs=seq(0,1,by=0.01))))
z<- z[,!duplicated(colnames(z))]
z$season <- factor(z$season, levels=c("JFM", "AMJ", "JAS", "OND"))
ggplot(z) + geom_point(aes(x=wgen,y=silo)) + geom_abline(slope=1) +
labs(title="QQ - seasonal rainfall totals") +
theme_minimal() + facet_wrap (~season)
# Temperature - monthly avg
df.m<-df %>%
group_by(src, file, month, year) %>%
summarise(meant = mean((mint + maxt) / 2)) %>%
tidyr::spread(src, meant) %>%
ungroup() %>%
select(-c(file,year))
z<- cbind(
df.m %>% group_by(month) %>% reframe(wgen=quantile(na.omit(wgen),probs=seq(0,1,by=0.01))),
df.m %>% group_by(month) %>% reframe(silo=quantile(na.omit(silo),probs=seq(0,1,by=0.01))))
z<- z[,!duplicated(colnames(z))]
ggplot(z) + geom_point(aes(x=wgen,y=silo)) + geom_abline(slope=1) +
labs(title="QQ - monthly mean temperature") +
theme_minimal() + facet_wrap(~month)
df.m<-df %>%
group_by(src, file, month, year) %>%
summarise(radn = sum(radn)) %>%
tidyr::spread(src, radn) %>%
ungroup() %>%
select(-c(file,year))
z<- cbind(
df.m %>% group_by(month) %>% reframe(wgen=quantile(na.omit(wgen),probs=seq(0,1,by=0.01))),
df.m %>% group_by(month) %>% reframe(silo=quantile(na.omit(silo),probs=seq(0,1,by=0.01))))
z<- z[,!duplicated(colnames(z))]
z$month <- factor(z$month, levels=1:12)
ggplot(z) + geom_point(aes(x=wgen,y=silo)) + geom_abline(slope=1) +
labs(title="QQ - monthly total radiation") +
theme_minimal() + facet_wrap(~month)
# Look at the number of planting events - 3 day rainfall above 25mm, 30mm
df$dateNorm<- as.Date(paste(2000, df$day), format="%Y %j")
early<- df  %>%
group_by(src, file, year) %>%
filter(dateNorm >= as.Date("2000-04-1") & dateNorm < as.Date("2000-05-15"))  %>%
mutate(rain3 =  roll_sum(rain, 3, align = "right", fill = 0)) %>%
summarise(event.25 =any(rain3 > 25), event.30 = any(rain3 > 30)) %>%
ungroup() %>%
group_by(src) %>%
summarise(freq.25 = sum(event.25) / n(),
freq.30 = sum(event.30) / n())
early
dev.off()
runApp('~/work/Projects/GRDC Roots 2023/Pipeline/App1.R')
runApp('~/work/Projects/GRDC Roots 2023/Pipeline/App1.R')
runApp('~/work/Projects/GRDC Roots 2023/Pipeline/App1.R')
runApp('~/work/Projects/GRDC Roots 2023/Pipeline/App1.R')
runApp('~/work/Projects/GRDC Roots 2023/Pipeline/App1.R')
runApp('~/work/Projects/GRDC Roots 2023/Pipeline/App1.R')
runApp('~/work/Projects/GRDC Roots 2023/Pipeline/App1.R')
runApp('~/work/Projects/GRDC Roots 2023/Pipeline/App1.R')
runApp('~/work/Projects/GRDC Roots 2023/Pipeline/App1.R')
runApp('~/work/Projects/GRDC Roots 2023/Pipeline/App1.R')
install.packages("leaflet")
runApp('~/work/Projects/GRDC Roots 2023/Pipeline/App1.R')
runApp('~/work/Projects/GRDC Roots 2023/Pipeline/App1.R')
runApp('~/work/Projects/GRDC Roots 2023/Pipeline/App1.R')
runApp('~/work/Projects/GRDC Roots 2023/Pipeline/App1.R')
runApp('~/work/Projects/GRDC Roots 2023/Pipeline/App1.R')
?reactive
runApp('~/work/Projects/GRDC Roots 2023/Pipeline/App1.R')
library(ozmaps)
install.packages(ozmaps)
install.packages("ozmaps")
runApp('~/work/Projects/GRDC Roots 2023/Pipeline/App1.R')
runApp('~/work/Projects/GRDC Roots 2023/Pipeline/App1.R')
runApp('~/work/Projects/GRDC Roots 2023/Pipeline/App1.R')
leaflet() %>%
setView(lat = -23.079, lng = 150, zoom = 4) %>%
addProviderTiles(providers$Esri_WorldImagery,
options = providerTileOptions(noWrap = TRUE))
leaflet() %>%
setView(lat = -23.079, lng = 150, zoom = 4) %>%
addTiles(group = "OSM (default)") %>%
addProviderTiles(providers$Esri_WorldImagery,
options = providerTileOptions(noWrap = TRUE))# %>%
leaflet() %>%
setView(lat = -23.079, lng = 130, zoom = 4) %>%
addTiles(group = "OSM (default)") %>%
addProviderTiles(providers$Esri_WorldImagery,
options = providerTileOptions(noWrap = TRUE))# %>%
leaflet() %>%
setView(lat = -23.079, lng = 135, zoom = 4) %>%
addTiles(group = "OSM (default)") %>%
addProviderTiles(providers$Esri_WorldImagery,
options = providerTileOptions(noWrap = TRUE))# %>%
runApp('~/work/Projects/GRDC Roots 2023/Pipeline/App1.R')
runApp('~/work/Projects/GRDC Roots 2023/Pipeline/App1.R')
runApp('~/work/Projects/GRDC Roots 2023/Pipeline/App1.R')
#var Esri_WorldImagery = L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', {
#  attribution: 'Tiles &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community'
#});
leaflet() %>%
setView(lat = -23.079, lng = 135, zoom = 4) %>%
addTiles(group = "OSM (default)") %>%
addProviderTiles(providers$Esri_WorldImagery,
options = providerTileOptions(noWrap = TRUE))# %>%
providers$
#var Esri_WorldImagery = L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', {
#  attribution: 'Tiles &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community'
#});
leaflet() %>%
setView(lat = -23.079, lng = 135, zoom = 4) %>%
addTiles(group = "OSM (default)") %>%
addProviderTiles(providers$Esri.WorldImagery,
options = providerTileOptions(noWrap = TRUE))# %>%
#var Esri_WorldImagery = L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', {
#  attribution: 'Tiles &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community'
#});
leaflet() %>%
setView(lat = -23.079, lng = 135, zoom = 4) %>%
addTiles(group = "OSM (default)") %>%
addProviderTiles(providers$Esri.WorldImagery,
options = providerTileOptions(noWrap = TRUE))# %>%
leaflet() %>%
setView(lat = -24, lng = 135, zoom = 4) %>%
addTiles(group = "OSM (default)") %>%
addProviderTiles(providers$Esri.WorldImagery,
options = providerTileOptions(noWrap = TRUE))# %>%
leaflet() %>%
setView(lat = -26, lng = 135, zoom = 4) %>%
addTiles(group = "OSM (default)") %>%
addProviderTiles(providers$Esri.WorldImagery,
options = providerTileOptions(noWrap = TRUE))# %>%
runApp('~/work/Projects/GRDC Roots 2023/Pipeline/App1.R')
runApp('~/work/Projects/GRDC Roots 2023/Pipeline/App1.R')
?selectInput
runApp('~/work/Projects/GRDC Roots 2023/Pipeline/App1.R')
runApp('~/work/Projects/GRDC Roots 2023/Pipeline/App1.R')
df <- read.csv("AATest.csv", sep = ",", header=T),
df <- read.csv("AATest.csv", sep = ",", header=T)
setwd("~")
df <- read.csv("AATest.csv", sep = ",", header=T)
names(df)
?validate
df %>%
mutate(DateTime = as.POSIXct(paste(df$YYYY.MM.DD, df$HH.MM.SS.F),
format = "%Y/%m/%d %H:%M:%s")) %>%
rename_at(vars(starts_with('EM.')), funs( . ))
df %>%
mutate(DateTime = as.POSIXct(paste(df$YYYY.MM.DD, df$HH.MM.SS.F),
format = "%Y/%m/%d %H:%M:%s")) %>%
rename_at(vars(starts_with('EM.')),  .)
df
df %>%
mutate(DateTime = as.POSIXct(paste(df$YYYY.MM.DD, df$HH.MM.SS.F),
format = "%Y/%m/%d %H:%M:%s")) %>%
rename_at(vars(starts_with('EM.')),  .)
df %>%
mutate(DateTime = as.POSIXct(paste(df$YYYY.MM.DD, df$HH.MM.SS.F),
format = "%Y/%m/%d %H:%M:%s")) %>%
rename_with(vars(starts_with('EM')),  ~ sub("^EM\.", "", .x))
df %>%
mutate(DateTime = as.POSIXct(paste(df$YYYY.MM.DD, df$HH.MM.SS.F),
format = "%Y/%m/%d %H:%M:%s")) %>%
rename_with(vars(starts_with('EM')),  ~ sub("^EM\\.", "", .x))
names(df)
df %>%
mutate(DateTime = as.POSIXct(paste(df$YYYY.MM.DD, df$HH.MM.SS.F),
format = "%Y/%m/%d %H:%M:%s")) %>%
rename_with(vars(starts_with('EM')),  ~ sub("^EM", "", .x))
df %>%
mutate(DateTime = as.POSIXct(paste(df$YYYY.MM.DD, df$HH.MM.SS.F),
format = "%Y/%m/%d %H:%M:%s")) %>%
rename_at(vars(starts_with('EM.')),  ~ sub("^EM", "", .x)) %>%
select(-c(`YYYY.MM.DD`, `HH.MM.SS.F`), -starts_with("Operator"))
df %>%
mutate(DateTime = as.POSIXct(paste(df$YYYY.MM.DD, df$HH.MM.SS.F),
format = "%Y/%m/%d %H:%M:%s")) %>%
rename_at(vars(starts_with('EM.')),  ~ sub("^EM\\.", "", .x)) %>%
select(-c(`YYYY.MM.DD`, `HH.MM.SS.F`), -starts_with("Operator"))
df %>%
mutate(DateTime = as.POSIXct(paste(YYYY.MM.DD, HH.MM.SS.F),
format = "%Y/%m/%d %H:%M:%s")) %>%
rename_at(vars(starts_with('EM.')),  ~ sub("^EM\\.", "", .x)) %>%
select(-c(`YYYY.MM.DD`, `HH.MM.SS.F`), -starts_with("Operator"))
?as.POSIXct
df %>%
mutate(DateTime = as.POSIXlt(paste(YYYY.MM.DD, HH.MM.SS.F),
format = "%Y/%m/%d %H:%M:%S")) %>%
rename_at(vars(starts_with('EM.')),  ~ sub("^EM\\.", "", .x)) %>%
select(-c(`YYYY.MM.DD`, `HH.MM.SS.F`), -starts_with("Operator"))
df %>%
mutate(DateTime = as.POSIXlt(paste(YYYY.MM.DD, HH.MM.SS.F),
format = "%Y/%m/%d %H:%M:%S")) %>%
rename_at(vars(starts_with('EM.')),  ~ sub("^EM\\.", "", .x)) %>%
select(-c(`YYYY.MM.DD`, `HH.MM.SS.F`), -starts_with("Operator"))
df %>%
mutate(DateTime = as.POSIXlt(paste(YYYY.MM.DD, HH.MM.SS.F),
"%Y/%m/%d %H:%M:%S")) %>%
rename_at(vars(starts_with('EM.')),  ~ sub("^EM\\.", "", .x)) %>%
select(-c(`YYYY.MM.DD`, `HH.MM.SS.F`), -starts_with("Operator"))
df %>%
mutate(DateTime = as.POSIXlt(paste(YYYY.MM.DD, HH.MM.SS.F),
"%Y/%m/%d %H:%M:%0S1")) %>%
rename_at(vars(starts_with('EM.')),  ~ sub("^EM\\.", "", .x)) %>%
select(-c(`YYYY.MM.DD`, `HH.MM.SS.F`), -starts_with("Operator"))
df1 <- df %>%
mutate(DateTime = as.POSIXlt(paste(YYYY.MM.DD, HH.MM.SS.F),
"%Y/%m/%d %H:%M:%0S1")) %>%
rename_at(vars(starts_with('EM.')),  ~ sub("^EM\\.", "", .x)) %>%
select(-c(`YYYY.MM.DD`, `HH.MM.SS.F`), -starts_with("Operator"))
df1$DateTime[1]
format.POSIXct(df1$DateTime[1], "%Y/%m/%d %H:%M:%0S1")
format.POSIXlt(df1$DateTime[1], "%Y/%m/%d %H:%M:%0S1")
df <- read.csv("AATest.csv", sep = ",", header=T)
df1 <- df %>%
mutate(DateTime = as.POSIXlt(paste(YYYY.MM.DD, HH.MM.SS.F),
"%d/%m/%Y %H:%M:%0S1")) %>%
rename_at(vars(starts_with('EM.')),  ~ sub("^EM\\.", "", .x)) %>%
select(-c(`YYYY.MM.DD`, `HH.MM.SS.F`), -starts_with("Operator"))
format.POSIXlt(df1$DateTime[1], "%Y/%m/%d %H:%M:%0S1")
format.POSIXlt(df1$DateTime[1], "%d/%m/%Y %H:%M:%0S1")
df1 <- df %>%
mutate(DateTime = as.POSIXct(paste(YYYY.MM.DD, HH.MM.SS.F),
"%d/%m/%Y %H:%M:%0S1")) %>%
rename_at(vars(starts_with('EM.')),  ~ sub("^EM\\.", "", .x)) %>%
select(-c(`YYYY.MM.DD`, `HH.MM.SS.F`), -starts_with("Operator"))
df1 <- df %>%
mutate(DateTime = as.POSIXct(paste(YYYY.MM.DD, HH.MM.SS.F),
"%d/%m/%Y %H:%M.%0S1")) %>%
rename_at(vars(starts_with('EM.')),  ~ sub("^EM\\.", "", .x)) %>%
select(-c(`YYYY.MM.DD`, `HH.MM.SS.F`), -starts_with("Operator"))
df1 <- df %>%
mutate(t1 = paste(YYYY.MM.DD, HH.MM.SS.F),
DateTime = as.POSIXct(paste(YYYY.MM.DD, HH.MM.SS.F),
"%d/%m/%Y %H:%M.%0S1")) %>%
rename_at(vars(starts_with('EM.')),  ~ sub("^EM\\.", "", .x)) %>%
select(-c(`YYYY.MM.DD`, `HH.MM.SS.F`), -starts_with("Operator"))
as.POSIXct()
df1$t1[2]
as.POSIXct("22/05/2023 16:26.2")
as.POSIXlt("22/05/2023 16:26.2")
df1 <- df %>%
mutate(t1 = paste(YYYY.MM.DD, HH.MM.SS.F),
DateTime = as.POSIXct(paste(YYYY.MM.DD, HH.MM.SS.F),
"%d/%m/%Y %H:%M.%0S1", tz="AEST")) %>%
rename_at(vars(starts_with('EM.')),  ~ sub("^EM\\.", "", .x)) %>%
select(-c(`YYYY.MM.DD`, `HH.MM.SS.F`), -starts_with("Operator"))
df1 <- df %>%
mutate(t1 = paste(YYYY.MM.DD, HH.MM.SS.F),
DateTime = as.POSIXct(paste(YYYY.MM.DD, HH.MM.SS.F),
"%d/%m/%Y %H:%M.%0S1", tz="UTC+10")) %>%
rename_at(vars(starts_with('EM.')),  ~ sub("^EM\\.", "", .x)) %>%
select(-c(`YYYY.MM.DD`, `HH.MM.SS.F`), -starts_with("Operator"))
df1 <- df %>%
mutate(t1 = paste(YYYY.MM.DD, HH.MM.SS.F),
DateTime = as.POSIXct(paste(YYYY.MM.DD, HH.MM.SS.F),
"%d/%m/%Y %H:%M.%S")) %>%
rename_at(vars(starts_with('EM.')),  ~ sub("^EM\\.", "", .x)) %>%
select(-c(`YYYY.MM.DD`, `HH.MM.SS.F`), -starts_with("Operator"))
df1 <- df %>%
mutate(t1 = paste(YYYY.MM.DD, HH.MM.SS.F),
DateTime = as.POSIXct(paste(YYYY.MM.DD, HH.MM.SS.F),
format="%d/%m/%Y %H:%M.%S")) %>%
rename_at(vars(starts_with('EM.')),  ~ sub("^EM\\.", "", .x)) %>%
select(-c(`YYYY.MM.DD`, `HH.MM.SS.F`), -starts_with("Operator"))
df1 <- df %>%
mutate(DateTime = as.POSIXct(paste(YYYY.MM.DD, HH.MM.SS.F),
format="%d/%m/%Y %H:%M.%S")) %>%
rename_at(vars(starts_with('EM.')),  ~ sub("^EM\\.", "", .x)) %>%
select(-c(`YYYY.MM.DD`, `HH.MM.SS.F`), -starts_with("Operator")) %>%
relocate(DateTime)
runApp('work/Projects/GRDC Roots 2023/Pipeline/App1.R')
??rename
??dplyr::rename
names(df1)
runApp('work/Projects/GRDC Roots 2023/Pipeline/App1.R')
runApp('work/Projects/GRDC Roots 2023/Pipeline/App1.R')
runApp('work/Projects/GRDC Roots 2023/Pipeline/App1.R')
runApp('work/Projects/GRDC Roots 2023/Pipeline/App1.R')
runApp('work/Projects/GRDC Roots 2023/Pipeline/App1.R')
df <- read.csv("AATest.csv", sep = ",", header=T)
df$Latitude.2<- df$Latitude.2 * -1
write.csv(df, file="AATest.csv", sep=",", header=T, row.names = F)
write.csv(df, file="AATest.csv",  row.names = F)
runApp('work/Projects/GRDC Roots 2023/Pipeline/App1.R')
runApp('work/Projects/GRDC Roots 2023/Pipeline/App1.R')
runApp('work/Projects/GRDC Roots 2023/Pipeline/App1.R')
runApp('work/Projects/GRDC Roots 2023/Pipeline/App1.R')
runApp('work/Projects/GRDC Roots 2023/Pipeline/App1.R')
runApp('work/Projects/GRDC Roots 2023/Pipeline/App1.R')
